최초의 브라우저: 모자이크

Netscape
- 네비게이터 브라우저
- 브랜든 아이크(Brendan Eich) 영입
- 10일만에 모카라는 언어로 네비게이터에 적용(인터프리터 사용)
    모카 -> 라이브 스크립트 -> 자바스크립트

Query
- 과거 부라우저 및 특정 브라우저 버전등을 모두 사용할 수 있도록 하는 라이브러리

- -jQuery'
- 과거 브라우저 및 특정 브라우저 버전등을 모두 사용할 수 있도로 하는 라이브러리
- Jquery 문법을 공부해야 하는 단점

ECMA
스크립트를 표준화(ECMA International에 요청)

트렌스 컴파일러
- BABEL
- 과거 브라우저 및 특정 브라우저 버전등을 모드 사용할 수 있도록 하는 라이브러리

JavaScript:바닐라 스크립트
react, vue, angular: SPA(Single Page Application)
node.js: 2009년 라이언 달이 발표한 자바스크립트 런타임 환경

typescript: JavaScript에 type을 추가한 스크립트


자바스크립트
- 객체 기반의 스크립트 언어
- 대소문자를 구별
- 마지막 ;(세미콜론) 생략이 가능

자바스크립트의 출력
WEB API console API 통해 브라우저 console 창에 출력

1. HTML 문서에서 <script> 태그 안에 작성
2. .js(자바스크립트 파일) 안에 작성

자바스크립트 실행 순서
인터프리터 방식이므로 위에서 아래로 실행

HTML 시작 -> <head>에 있는 <script> 다운로드/실행 -> HTML 끝
    - script 파일 다운로드가 늦을 경우 HTML 실행되지 않은 상태에서 빈 화면이 보일 수 있음

HTML 시작 -> <body> 끝에 있는 <script> 다운로드/실행 -> HTML 끝
    - 완벽하지 않은 HTML이 먼저 보여 잘못된 UI가 보일 수 있음

HTML 시작 -> <head>에 있는 <script async> 다운로드/실행 -> HTML 끝
    - HTML이 시작되고 script 파일을 동시에 다운로드/실행을 진행함
    - script 파일이 여러개 있을 경우 먼저 다운로드된 script 파일을 실행하게 됨

 HTML 시작 -> <head>에 있는 <script defer> 다운로드/실행 -> HTML 끝
    - HTML이 시작되고 script 파일을 동시에 다운로드/실행을 진행함
    - script 실행은 페이지 구성이 끝날 때까지 지연
    - script 순서에 따라 실행


변수(Variable)
- 데이터를 저장할 수 있는 메모리 공간
- 값이 변경될 수 있음
- 자바스크립트의 변수는 타입이 없음
- let 키워드를 사용하여 변수를 선언

    let 변수명;
    let num;

✔ var
- 유연한 변수방식
- 지역변수 전역변수와의 구별이 없음
- 같은 이름의 변수를 선언할 수 있음


    console.log(num);
    var num = 10;
    {
        console.log(num);   // 전역변수 10
        var str = '안녕';   // 지역변수 안녕
    }
    console.log(str);   // 안녕
    var num = 30;

    
상수(constant)
- 한번 선언된 상수는 다시 재정의 할 수 없음
- 값을 재할당 할 수 없음

    constat 상수명 = 값;
    const num = 10;    

    const 상수명;
    상수명 = 10; (X)


✔ 자바스크립트에서 상수를 권장하는 이유
- 해킹을 방지하기 위해
- 개발자 실수를 방지하기 위해


자바스크립트의 데이터 타입
- 프로그램에서 다룰 수 있는 값의 종류
- 자바스크립트는 선언시 타입을 정하지 않기 때문에 많은 문제가 발생
- 자바스크립트의 타입 유연성을 해결하기 위해 타입 스크립트가 탄생

1. 숫자형(number)
- 정수와 실수를 따로 구분하지 않음
- 모든 수를 실수 하나로만 표현

2. 문자형(string)
- '' 또는 "" 또는 ``로 둘러싸인 문자의 집합

    '입력한 숫자는 ' + num + ' 입니다'
    `입력한 숫자는 ${num} 입니다`

3. 논리형(boolean)
- 참(true)과 거짓(false)으로 표현되는 값
- false, 0, '', "", null, undefined는 모두 거짓으로 판정함
- false로 판정된 값이 아닌 모든값은 참으로 판정함

4. undefined, null
- undefined: 타입이 정해지지 않은 형을 의미(변수 선언 후 값이 정해지지 않은 경우)
    let num;
    console.log(a); // undefined
- null: null을 저장한 값. 값이 없는 것
    let obj = null; // object

5. 심볼형(symbol)
- 유일하고 변경 불가능한 기본값을 만듬
- 객체 속성의 key로 사용
    const sym1 = Symbol('Apple');
    const sym2 = Symbol('Apple');
    console.log(sym1 === sym2); // 형과 값이 같은지 비교
    console.log(sym1 == sym2);  // 값이 같은지 비교

6. 객체형(object)
- 어떤 속성을 하나의 변수에 저장할 수 있게 해주는 집합
- key value pair 구조로 저장
    let user = {'userid':'apple', 'name':'김사과', 'age':20}
                -------- -------
                  key     value

✔ 자바스크립트의 변수는 타입이 고정되어 있지 않으며 같은 변수에 다른 타입의 값을 대입할 수 있음
let a = {'userid':'apple', 'name':'김사과', 'age':20}; // object
a = 10; // number

✔ 자동 타입 변환
- 특정 타입의 값이 기대하는 곳에 다른 타입의 값이 오면 자동으로 타입을 변환해서 사용

    const a = "10";
    const b = "20";
    let result = a + b; // 1020
    result = a - b; // -10
    result = a * b; // 200
    const c = '삼십';
    result = c - a; // NaN

✔ NaN(Not a Number)
- 정의되지 않은 값이나 표현할 수 없는 값' 이라는 의미
- 숫자로 변환할 수 없는 연산을 시도

✔ 타입변환 함수
- 강제로 타입을 변환

    const a = "10";
    const b = "20";
    let result = a + b; // 1020
    result = number(a) + Number(b); // 30

Number(): 문자를 숫자로 변환
String(): 숫자나 불린등을 문자형으로 변환
Boolean(): 문자나 숫자등을 불린형으로 변환
    Boolean('kim'); // true
    Boolean(null); // false
Object(): 모든 자료형을 객체형으로 변환
    let str = 'a';
    result = Object(str);   // {a}

parseInt(): 문자를 int형으로 변환
parseFloat(): 문자를 float형으로 변환
